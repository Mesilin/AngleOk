// <auto-generated />
using System;
using Data.AngleOk.Model.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.AngleOk.Model.Migrations
{
    [DbContext(typeof(AngleOkContext))]
    [Migration("20240908184807_AddCommentsForModels")]
    partial class AddCommentsForModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.AngleOk.Model.Models.Advertisement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор объявления");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор клиента");

                    b.Property<Guid>("DealTypeId")
                        .HasColumnType("uuid")
                        .HasComment("Тип(аренда, продажа, покупка)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Описание");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasComment("Признак активности");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор контактного лица от агентства");

                    b.Property<int>("MaxPrice")
                        .HasColumnType("integer")
                        .HasComment("Максимальная цена");

                    b.Property<int>("MinPrice")
                        .HasColumnType("integer")
                        .HasComment("Минимальная цена");

                    b.Property<Guid?>("RealtyObjectId")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор объекта недвижимости");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Краткое описание");

                    b.Property<int>("TargetPrice")
                        .HasColumnType("integer")
                        .HasComment("Целевая цена");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DealTypeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RealtyObjectId");

                    b.ToTable("Advertisement", "public", t =>
                        {
                            t.HasComment("Объявления");
                        });
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasComment("Адрес электронной почты");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Имя");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Фамилия");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text")
                        .HasComment("Отчество");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Номер телефона");

                    b.HasKey("Id");

                    b.ToTable("Client", "public", t =>
                        {
                            t.HasComment("Таблица Клиенты");
                        });
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.ClientType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Тип клиента");

                    b.HasKey("Id");

                    b.ToTable("ClientType", "public", t =>
                        {
                            t.HasComment("Типы клиентов");
                        });
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.DealType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор");

                    b.Property<string>("DealTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Тип сделки");

                    b.HasKey("Id");

                    b.ToTable("DealType", "public", t =>
                        {
                            t.HasComment("Типы сделок (объявлений). аренда, продажа, покупка");
                        });
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор сотрудника");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasComment("Адрес электронной почты");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Имя");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasComment("Признак действующего сотрудника");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Фамилия");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text")
                        .HasComment("Отчество");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("телефон личн");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Должность");

                    b.Property<string>("PublicPhone")
                        .HasColumnType("text")
                        .HasComment("Телефон раб");

                    b.HasKey("Id");

                    b.ToTable("Employee", "public", t =>
                        {
                            t.HasComment("Сотрудники агентства");
                        });
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Flat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор квартиры");

                    b.Property<decimal>("CeilingHeight")
                        .HasColumnType("numeric")
                        .HasComment("Высота потолков");

                    b.Property<int>("Floor")
                        .HasColumnType("integer")
                        .HasComment("Этаж");

                    b.Property<decimal>("LiveArea")
                        .HasColumnType("numeric")
                        .HasComment("Жилая площадь");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Материал стен");

                    b.Property<Guid>("RealtyObjectId")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор объекта недвижимости");

                    b.Property<int>("RoomCount")
                        .HasColumnType("integer")
                        .HasComment("Количество комнат");

                    b.Property<decimal>("TotalArea")
                        .HasColumnType("numeric")
                        .HasComment("Общая площадь");

                    b.Property<int>("YearOfBuild")
                        .HasColumnType("integer")
                        .HasComment("Год постройки");

                    b.HasKey("Id");

                    b.HasIndex("RealtyObjectId");

                    b.ToTable("Flat", "public", t =>
                        {
                            t.HasComment("Квартиры");
                        });
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор фото");

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea")
                        .HasComment("Двоичные данные файла");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Расширение файла");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Имя файла");

                    b.Property<bool>("IsTitle")
                        .HasColumnType("boolean")
                        .HasComment("Признак титульного фото для объекта");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasComment("Путь к файлу");

                    b.Property<Guid?>("RealtyObjectId")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор объекта недвижимости");

                    b.HasKey("Id");

                    b.HasIndex("RealtyObjectId");

                    b.ToTable("Media", "public", t =>
                        {
                            t.HasComment("Фото");
                        });
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.RealtyObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Адрес");

                    b.Property<string>("CadastralNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Кадастровый номер");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasComment("Описание");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric")
                        .HasComment("Широта");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric")
                        .HasComment("Долгота");

                    b.Property<Guid>("RealtyObjectKindId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RealtyObjectKindId");

                    b.ToTable("RealtyObject", "public", t =>
                        {
                            t.HasComment("Объекты недвижимости");
                        });
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.RealtyObjectKind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор");

                    b.Property<string>("RealtyObjectKindName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Тип объекта невижимости");

                    b.HasKey("Id");

                    b.ToTable("RealtyObjectKind", "public", t =>
                        {
                            t.HasComment("Виды объектов невижимости");
                        });
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Stead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric")
                        .HasComment("Площадь");

                    b.Property<Guid>("RealtyObjectId")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор объекта недвижимости");

                    b.Property<Guid>("SteadUseKindId")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор вида разрешенного использования");

                    b.HasKey("Id");

                    b.HasIndex("RealtyObjectId");

                    b.HasIndex("SteadUseKindId");

                    b.ToTable("Stead", "public", t =>
                        {
                            t.HasComment("Земельные участки");
                        });
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.SteadUseKind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор");

                    b.Property<string>("SteadUseKindName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Вид разрешенного использования земли");

                    b.HasKey("Id");

                    b.ToTable("SteadUseKind", "public", t =>
                        {
                            t.HasComment("Виды разрешенного использования земли");
                        });
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.TextField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodeWord")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text");

                    b.Property<string>("Subtitle")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TextField", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "public");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Advertisement", b =>
                {
                    b.HasOne("Data.AngleOk.Model.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.AngleOk.Model.Models.DealType", "DealType")
                        .WithMany()
                        .HasForeignKey("DealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.AngleOk.Model.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.AngleOk.Model.Models.RealtyObject", "RealtyObject")
                        .WithMany()
                        .HasForeignKey("RealtyObjectId");

                    b.Navigation("Client");

                    b.Navigation("DealType");

                    b.Navigation("Manager");

                    b.Navigation("RealtyObject");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Flat", b =>
                {
                    b.HasOne("Data.AngleOk.Model.Models.RealtyObject", "RealtyObject")
                        .WithMany()
                        .HasForeignKey("RealtyObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealtyObject");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Media", b =>
                {
                    b.HasOne("Data.AngleOk.Model.Models.RealtyObject", null)
                        .WithMany("MediaMaterials")
                        .HasForeignKey("RealtyObjectId");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.RealtyObject", b =>
                {
                    b.HasOne("Data.AngleOk.Model.Models.RealtyObjectKind", "RealtyObjectKind")
                        .WithMany()
                        .HasForeignKey("RealtyObjectKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealtyObjectKind");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Stead", b =>
                {
                    b.HasOne("Data.AngleOk.Model.Models.RealtyObject", "RealtyObject")
                        .WithMany()
                        .HasForeignKey("RealtyObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.AngleOk.Model.Models.SteadUseKind", "SteadUseKind")
                        .WithMany()
                        .HasForeignKey("SteadUseKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealtyObject");

                    b.Navigation("SteadUseKind");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.RealtyObject", b =>
                {
                    b.Navigation("MediaMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
