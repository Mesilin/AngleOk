// <auto-generated />
using System;
using Data.AngleOk.Model.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.AngleOk.Model.Migrations
{
    [DbContext(typeof(AngleOkContext))]
    [Migration("20230927153301_AddIdentityUser")]
    partial class AddIdentityUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.AngleOk.Model.Models.Advertisement", b =>
                {
                    b.Property<Guid>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RealtyObjectId")
                        .HasColumnType("uuid");

                    b.HasKey("AdvertisementId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RealtyObjectId");

                    b.ToTable("Advertisement");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Contract", b =>
                {
                    b.Property<Guid>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DealTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxPrice")
                        .HasColumnType("integer");

                    b.Property<int>("MinPrice")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RealtyObjectId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<int>("TargetPrice")
                        .HasColumnType("integer");

                    b.HasKey("ContractId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DealTypeId");

                    b.HasIndex("RealtyObjectId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.DealType", b =>
                {
                    b.Property<Guid>("DealTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DealTypeId");

                    b.ToTable("DealType");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublicPhone")
                        .HasColumnType("text");

                    b.HasKey("EmployeeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Flat", b =>
                {
                    b.Property<Guid>("FlatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CeilingHeight")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<decimal>("LiveArea")
                        .HasColumnType("numeric");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RealtyObjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoomCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalArea")
                        .HasColumnType("numeric");

                    b.Property<int>("YearOfBuild")
                        .HasColumnType("integer");

                    b.HasKey("FlatId");

                    b.HasIndex("RealtyObjectId");

                    b.ToTable("Flat");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Media", b =>
                {
                    b.Property<Guid>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<Guid>("RealtyObjectId")
                        .HasColumnType("uuid");

                    b.HasKey("MediaId");

                    b.HasIndex("RealtyObjectId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PersonId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.RealtyObject", b =>
                {
                    b.Property<Guid>("RealtyObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CadastralNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<Guid>("RealtyObjectTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("RealtyObjectId");

                    b.HasIndex("RealtyObjectTypeId");

                    b.ToTable("RealtyObject");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.RealtyObjectType", b =>
                {
                    b.Property<Guid>("RealtyObjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RealtyObjectTypeId");

                    b.ToTable("RealtyObjectType");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Stead", b =>
                {
                    b.Property<Guid>("SteadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("RealtyObjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SteadKindId")
                        .HasColumnType("uuid");

                    b.HasKey("SteadId");

                    b.HasIndex("RealtyObjectId");

                    b.HasIndex("SteadKindId");

                    b.ToTable("Stead");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.SteadKind", b =>
                {
                    b.Property<Guid>("SteadKindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SteadKindId");

                    b.ToTable("SteadKind");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Advertisement", b =>
                {
                    b.HasOne("Data.AngleOk.Model.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.AngleOk.Model.Models.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.AngleOk.Model.Models.RealtyObject", "RealtyObject")
                        .WithMany()
                        .HasForeignKey("RealtyObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Manager");

                    b.Navigation("RealtyObject");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Contract", b =>
                {
                    b.HasOne("Data.AngleOk.Model.Models.Person", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.AngleOk.Model.Models.DealType", "DealType")
                        .WithMany()
                        .HasForeignKey("DealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.AngleOk.Model.Models.RealtyObject", "RealtyObject")
                        .WithMany()
                        .HasForeignKey("RealtyObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("DealType");

                    b.Navigation("RealtyObject");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Employee", b =>
                {
                    b.HasOne("Data.AngleOk.Model.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Flat", b =>
                {
                    b.HasOne("Data.AngleOk.Model.Models.RealtyObject", "RealtyObject")
                        .WithMany()
                        .HasForeignKey("RealtyObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealtyObject");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Media", b =>
                {
                    b.HasOne("Data.AngleOk.Model.Models.RealtyObject", "RealtyObject")
                        .WithMany("MediaMaterials")
                        .HasForeignKey("RealtyObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealtyObject");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.RealtyObject", b =>
                {
                    b.HasOne("Data.AngleOk.Model.Models.RealtyObjectType", "RealtyObjectType")
                        .WithMany()
                        .HasForeignKey("RealtyObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealtyObjectType");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.Stead", b =>
                {
                    b.HasOne("Data.AngleOk.Model.Models.RealtyObject", "RealtyObject")
                        .WithMany()
                        .HasForeignKey("RealtyObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.AngleOk.Model.Models.SteadKind", "SteadKind")
                        .WithMany()
                        .HasForeignKey("SteadKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealtyObject");

                    b.Navigation("SteadKind");
                });

            modelBuilder.Entity("Data.AngleOk.Model.Models.RealtyObject", b =>
                {
                    b.Navigation("MediaMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
